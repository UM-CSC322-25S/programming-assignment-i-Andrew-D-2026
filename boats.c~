#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#define MAX_STRING 128
#define SEPARATORS ","

typedef char String[MAX_STRING];

typedef enum {
    slip,
    land,
    trailor,
    storage,
    no_place
} PlaceType;

typedef union{
    int SlipInfo;
    char LandInfo;
    String TrailorInfo;
    int StorageInfo;
} TagInfo;

typedef struct {
    String name;
    int length;
    PlaceType place;
    TagInfo tag; 
    double money;
} NewBoat;
    

PlaceType StringToPlaceType(char * PlaceString) {

    if (!strcasecmp(PlaceString,"slip")) {
        return(slip);
    }
    if (!strcasecmp(PlaceString,"land")) {
        return(land);
    }
    if (!strcasecmp(PlaceString,"trailor")) {
        return(trailor);
    }
    if (!strcasecmp(PlaceString,"storage")) {
        return(storage);
    }
    return(no_place);
}

char * PlaceToString(PlaceType Place) {

    switch (Place) {
        case slip:
            return("slip");
        case land:
            return("land");
        case trailor:
            return("trailor");
        case storage:
            return("storage");
        case no_place:
            return("no_place");
        default:
            printf("How the faaark did I get here?\n");
            exit(EXIT_FAILURE);
            break;
    }
}

int sort(NewBoat *BoatList, int *size){


    int i = 0;
    int j = 0;
    NewBoat temp;


    for (i = 0; i < *size; i++){

        for (j = 0; j < *size - 1; j++){

            if (strcmp(BoatList[j].name, BoatList[j+1].name) > 0){

                temp = BoatList[j];
                BoatList[j] = BoatList[j+1];
                BoatList[j+1] = temp;

            }
        }
    }

    return (EXIT_SUCCESS);
}


int addBoat(NewBoat *BoatList[120], NewBoat addition, int *size){
    
    for (int i = 0; i < 120; i++){
    
        if (BoatList[i] == NULL){
   
            *BoatList[i] = addition;
            *size = (*size) + 1;
            break;

        }
    }

    sort(*BoatList, size);
    return (EXIT_SUCCESS);
}


int tokenize(FILE *InputFile, NewBoat *BoatList[120], int *size){

    String S1;
    char *Words = NULL;

    while ((fgets(S1, 2*MAX_STRING, InputFile)) != NULL) {

        printf("this is supposed to be: %s", S1);  
  
        Words = strtok(S1,SEPARATORS);

        if (Words == NULL) {
        printf("ERROR: strtok returned NULL!\n");
    }

        printf("issue?");
 
        printf("%s", Words);

        NewBoat addition;

        strcpy(addition.name, Words);

        if (Words == NULL){
            printf("error in input - after name");
            return (EXIT_FAILURE);
        }

        Words = strtok(NULL, ",");

        addition.length = atoi(Words);

        if (Words == NULL){
            printf("error in input - after length");
            return (EXIT_FAILURE);
        }

        Words = strtok(NULL, ",");

        addition.place = StringToPlaceType(Words);

        if (Words == NULL){
            printf("error in input - after place");
            return (EXIT_FAILURE);
        }

        Words = strtok(NULL, ",");

        if (addition.place == slip){
            addition.tag.SlipInfo = atoi(Words);
        }
        else if (addition.place == land){
            addition.tag.LandInfo = atoi(Words);
        }
        else if (addition.place == trailor){
            strcpy(addition.tag.TrailorInfo, Words);
        }
        else if (addition.place == storage){
            addition.tag.StorageInfo = atoi(Words);
        }

        Words = strtok(NULL, ",");

        addition.money = atof(Words);
       
        addBoat(BoatList, addition, size);
 
    }


    return(EXIT_SUCCESS);

}

int main(int argc, char* argv[]){

    FILE *InputFile;
    //FILE *OutputFile;
    int sizeval = 0;
    int *size = &sizeval;

    
    NewBoat *BoatList[120] = {NULL};

    if (argc != 2){
        printf("ERROR: Incorrect number of arguments given\n");
        return(EXIT_FAILURE);
    }

    if ((InputFile = fopen(argv[1],"r")) != NULL) { 
        tokenize(InputFile, BoatList, size);        

    }

    for (int j = 0; j < *size; j++){
        printf("%s", BoatList[j]->name);
    }

    

}

